@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// MEDIA QUERY MANAGER
/*
0 - 600px:      Phone
600 - 900px:    Tablet portrait
900 - 1200px:   Tablet landscape
[1200 - 1800] is where our normal styles apply
1800px + :      Big desktop

$breakpoint arguement choices:
- phone
- tab-port
- tab-land
- big-desktop

ORDER: Base + typography > general layout + grid > page layout > components
1em = 16px
*/

@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    @media only screen and (max-width: 37.5em) {
      @content;
    } //600px
  }
  @if $breakpoint == tab-port {
    @media only screen and (max-width: 56.25em) {
      @content;
    } //900px
  }
  @if $breakpoint == tab-land {
    @media only screen and (max-width: 75em) {
      @content;
    } //1200px
  }
  @if $breakpoint == big-desktop {
    @media only screen and (min-width: 112.5em) {
      @content;
    } //1800
  }
}
// The big-desktop media query is a 'min-width' query, which means that it tests for
// screens of 1800px or more. All the other media queries are 'max-width' queries, so
// they test for screens with a size smaller then some value (tab-land: 1200px). Next
// point: the order of statements, meaning that media query statement (as all statements)
// are executed sequentialy: the top one first. So, if you order your 'max-width' queries
// from small to larger, for example for a really small screen like 500px, all the tests
// will be true and the last statement will be executed (tab-land), while you want the
// smallest query to be executed (phone). This result only will occur when you put your
// 'max-width' queries in reverse order (largest screen on top).
